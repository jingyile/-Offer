第四次作业
1、出栈次序
    X星球特别讲究秩序，所有道路都是单行线。一个甲壳虫车队，共16辆车，按照编号先后发车，夹在其它车流中，缓缓前行。
路边有个死胡同，只能容一辆车通过，是临时的检查站，如图【p1.png】所示。
X星球太死板，要求每辆路过的车必须进入检查站，也可能不检查就放行，也可能仔细检查。
如果车辆进入检查站和离开的次序可以任意交错。那么，该车队再次上路后，可能的次序有多少种？为了方便起见，假设检查站可容纳任意数量的汽车。
显然，如果车队只有1辆车，可能次序1种；2辆车可能次序2种；3辆车可能次序5种。现在足足有16辆车啊，亲！需要你计算出可能次序的数目。
这是一个整数，请通过浏览器提交答案，不要填写任何多余的内容（比如说明性文字）。
以前碰到过求所有可能出栈次序的问题，当时也了解了一下卡特兰数可以直接用递推公式解决，可忘记了公式是啥了，于是又去百度了一下这个，
在这里写一遍递推公式，以后要记牢，方便快速解决此类问题。
H(n)=h(n-1)*(4n-2)/n+1
#include <stdio.h>
int main()
{
    int n,h[20];
    h[0]=1;
    h[1]=1;
    for(n=2;n<=16;n++)
        h[n]=h[n-1]*(4*n-2)/(n+1);
    printf("%d\n",h[16]);
    return 0;
}
为了防止公式又想不起来还是掌握下这种容易现场推的递推方法吧。
f(4) = f(3) +f(2) * f(1) + f(1) * f(2) + f(3);
整理后：
f(4) = f(0)*f(3) + f(1)*f(2) + f(2) * f(1)+ f(3)*f(0)

#include <stdio.h>
int main()
{
    int h[20];
    int i,j;
    h[0]=1;
    h[1]=1;
    h[2]=2;
    h[3]=5;
    for(i=4;i<=16;i++)
        h[i]=0;
    for(i=4; i<=16; i++) //求16个元素
    {
        for(j=0; j<=i-1; j++)
            h[i]+=h[j]*h[i-1-j];
    }
    printf("%d",h[16]);
    return 0;
}

2、格子刷油漆（动规）

    X国的一段古城墙的顶端可以看成 2*N个格子组成的矩形（如图1所示），现需要把这些格子刷上保护漆。
    你可以从任意一个格子刷起，刷完一格，可以移动到和它相邻的格子（对角相邻也算数），但不能移动到较远的格子（因为油漆未干不能踩！）
    比如：a d b c e f 就是合格的刷漆顺序。
    c e f d a b 是另一种合适的方案。
    当已知 N 时，求总的方案数。当N较大时，结果会迅速增大，请把结果对 1000000007 (十亿零七) 取模。
    输入数据为一个正整数（不大于1000）
    输出数据为一个正整数。
例如：
用户输入：
2
程序应该输出：
24
再例如：
用户输入：
3
程序应该输出：
96
再例如：
用户输入：
22
程序应该输出：
359635897
资源约定：
峰值内存消耗 < 64M
CPU消耗  < 1000ms
请严格按要求输出，不要画蛇添足地打印类似：“请您输入...” 的多余内容。
所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。
注意: main函数需要返回0
注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。
注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。
提交时，注意选择所期望的编译器类型(千万不要混淆c和cpp)。

看到这道题挺绝望的，因为并没有什么想法，看了好久还是没啥思路，于是去学习了一下网上的思路，然后自己写了一遍代码。现在也懂得题目给的图的意思了，结合这四张图整理下思路。
终点也就有两种情况，一种为任意一点，一种是和起点同一列，这种需要返回才刷完所有图。设立两个数组a,b,
a[n]为起点为某一角落长度为n终点任意不同列的情况数，
b[n]为起点为某一角落长度为n终点必须同列的情况数。
情况一
假设起点为第一列的第一行，先向下移动，再向右移动某个位置，情况数相当于 做长度为i-1的终点任意的情况数*2 因为不需要在回到第一列，而且到第二列的时候可能是第一行或者第二行，所以需要×2. 
a[i]=a[i−1]∗2

情况二
假设从起点出发最终回到第一列的第二行，那么情况数就是b[i] 



情况三
存在这样的情况，先进入第二列，然后返回第一列另一个位置，然后再回第二列，这个时候我们发现就没有必要再回第一列和第二列了，因为已经完成了。需要的情况数为 
2∗2∗a[i−2]
因为2种情况如图，而且到达第三列的位置有两种。 


另一种情况，当起点在格子中间位置的时候怎么办？！ 
假设起点在i那么两种情况 
- 1.向左运动后回到第i列然后向右运动 
- 2.向右运动后回到第i列然后向左运动

说白了就是需要一次回到出发点一列的所搜 ，然后做反方向的任意终点的运动。


注意每一步都需要进行模运算
#include <stdio.h>
#define mod 1000000007
long long a[1010],b[1010];
int main()
{
    int n;
    while(scanf("%d",&n)!=EOF)
    {
        if(n==1)
        {
            printf("2\n");
            continue;
        }
        else
        {
        a[1]=1;
        b[1]=1;
        a[2]=6;
        b[2]=2;
        int i;
        for(i=3;i<=n;i++)
        {
            b[i]=(b[i-1]*2)%mod;
            a[i]=(2*a[i-1]+b[i]+2*2*a[i-2])%mod;
        }
        long long ans=4*a[n];//四个角
        for(i=2;i<n;i++)
        {
        ans=(ans+8*b[i-1]*a[n-i])%mod;
        ans=(ans+8*b[n-i]*a[i-1])%mod;
        }
    printf("%I64d\n",ans);
        }
    }
    return 0;
}








3、（排列组合）暴力破解：
1. 循环嵌套2. 递归
递归暴力破解的基础：
生成全排列
ABC
ACB
BAC
BCA
CAB
CBA
-------
AAABBCCDFFF
取3个
C++STL实现全排列
#include <iostream>
#include <algorithm>
using namespace std;

int main()
{
    char a[3]={'A','B','C'};
    do
    {
        cout<<a[0]<<a[1]<<a[2];
        cout<<endl;
    }while(next_permutation(a,a+3));
    return 0;
}

4、牌型种数
小明被劫持到X赌城，被迫与其他3人玩牌。
一副扑克牌（去掉大小王牌，共52张），均匀发给4个人，每个人13张。
这时，小明脑子里突然冒出一个问题：
如果不考虑花色，只考虑点数，也不考虑自己得到的牌的先后顺序，自己手里能拿到的初始牌型组合一共有多少种呢？
请填写该整数，不要填写任何多余的内容或说明文字。
记得刚进实验室，学长给我看的一道题就是这个，当时的想法是13重循环来解决。
不考虑花色，也就是一共有13张牌，每种牌拿0,1,2,3,4五种情况
#include <stdio.h>
int main()
{
    int a[13];
    int cnt=0;
    for(a[0]=0;a[0]<=4;a[0]++)
    {
        for(a[1]=0;a[1]<=4;a[1]++)
        {
            for(a[2]=0;a[2]<=4;a[2]++)
            {
                for(a[3]=0;a[3]<=4;a[3]++)
                {
                    for(a[4]=0;a[4]<=4;a[4]++)
                    {
                        for(a[5]=0;a[5]<=4;a[5]++)
                        {
                            for(a[6]=0;a[6]<=4;a[6]++)
                            {
                                for(a[7]=0;a[7]<=4;a[7]++)
                                {
                                    for(a[8]=0;a[8]<=4;a[8]++)
                                    {
                                        for(a[9]=0;a[9]<=4;a[9]++)
                                        {
                                            for(a[10]=0;a[10]<=4;a[10]++)
                                            {
                                                for(a[11]=0;a[11]<=4;a[11]++)
                                                {
                                                    for(a[12]=0;a[12]<=4;a[12]++)
                                                    {
                                                        if(a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]+a[10]+a[11]+a[12]==13)
                                                        {
                                                            cnt++;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    printf("%d",cnt);
    return 0;
}
13重循环很浪费时间，虽然数据不算太大，应该可以AC，不过写起来很麻烦，还是写递归函数吧，一共13种牌，从1到13，这是递归参数之一，还有一个便是手里当前的牌数了。
#include <stdio.h>
int cnt;
int fx(int q,int sum)//q为当前牌大小（1-13），sum为当前牌数总和
{
    if(sum>13)
        return;
    if(q==13)//13种牌全部发完才可以判断
    {
        if(sum==13)
            cnt++;
        return;
    }
    int i;
    for(i=0; i<=4; i++)
        fx(q+1,sum+i);
}
int main()
{
    fx(0,0);
    printf("%d\n",cnt);
    return 0;
}


后者明显快多了。。
5、小明参加了学校的趣味运动会，其中的一个项目是：跳格子。
比赛时，先站在左上角的写着“从”字的格子里，可以横向或纵向跳相邻的格子里，但不能跳到对角的格子里。格子中写的字如下（或参看p1.jpg）：
从我做起振
我做起振兴
做起振兴中
起振兴中华
要求跳过的路线刚好构成“从我做起振兴中华”这句话。
请你帮助小明算一算他一共有多少种可能的跳跃路线呢？
答案是一个整数，请通过浏览器直接提交该数字。
注意：不要提交解答过程，或其它辅助说明类的内容。




比较无聊，自己又建了一个表格，可以看成一个矩阵，最终只是要走到“华”字的位置，也就是a[4][5]位置即可，题目一下子变得简单起来。
#include <stdio.h>
int a[5][6];
int cnt;
int fx(int x,int y)
{
    if(x==4&&y==5)
        cnt++;
    if(x!=4)
        fx(x+1,y);
    if(y!=5)
        fx(x,y+1);
    return cnt;
}
int main()
{
    printf("%d\n",fx(1,1));
    return 0;
}










6、（概率）班级中有50名同学，求有至少两个人生日相同的概率。
关于日期问问题的处理建议不要依赖于系统函数，不靠谱！
因为严格讲：时间、日期问题十分复杂
但根据需求，可以简单处理。
怎么看都是数学问题，至少有两个人生日相同，高三学概率常用正难则反。
很轻易想到它的反面应该是所有人生日都不相同。
一年应该是按365天算的吧，循环求出这50个人都在不同天生日的概率
第一个人365/365，任意，第二个人除了第一个人生日按天，任意，即364/365
以此类推
#include <stdio.h>
int main()
{
    int i;
    double p=1.0;
    for(i=0;i<50;i++)
        p*=(double)(365-i)/365;
    printf("%lf\n",1-p);
    return 0;
}


7、（算法几何）车轮轴迹
    栋栋每天骑自行车回家需要经过一条狭长的林荫道。道路由于年久失修，变得非常不平整。虽然栋栋每次都很颠簸，但他仍把骑车经过林荫道当成一种乐趣。
    由于颠簸，栋栋骑车回家的路径是一条上下起伏的曲线，栋栋想知道，他回家的这条曲线的长度究竟是多长呢？更准确的，栋栋想知道从林荫道的起点到林荫道的终点，他的车前轮的轴（圆心）经过的路径的长度。
    栋栋对路面进行了测量。他把道路简化成一条条长短不等的直线段，这些直线段首尾相连，且位于同一平面内。并在该平面内建立了一个直角坐标系，把所有线段的端点坐标都计算好。
    假设栋栋的自行车在行进的过程中前轮一直是贴着路面前进的。
    图1给出了一个简单的路面的例子，其中蓝色实线为路面，红色虚线为车轮轴经过的路径。在这个例子中，栋栋的前轮轴从A点出发，水平走到B点，然后绕着地面的F点到C点（绕出一个圆弧），再沿直线下坡到D点，最后水平走到E点，在这个图中地面的坐标依次为：(0, 0), (2, 0), (4, -1), (6, -1)，前轮半径为1.50，前轮轴前进的距离依次为：
    AB=2.0000；弧长BC=0.6955；CD=1.8820；DE=1.6459。
    总长度为6.2233。
    图2给出了一个较为复杂的路面的例子，在这个例子中，车轮在第一个下坡还没下完时（D点）就开始上坡了，之后在坡的顶点要从E绕一个较大的圆弧到F点。这个图中前轮的半径为1，每一段的长度依次为：
    AB=3.0000；弧长BC=0.9828；CD=1.1913；DE=2.6848；弧长EF=2.6224；    FG=2.4415；GH=2.2792。
    总长度为15.2021。
    现在给出了车轮的半径和路面的描述，请求出车轮轴轨迹的总长度。
    输入的第一行包含一个整数n和一个实数r，用一个空格分隔，表示描述路面的坐标点数和车轮的半径。
    接下来n行，每个包含两个实数，其中第i行的两个实数x[i], y[i]表示描述路面的第i个点的坐标。
    路面定义为所有路面坐标点顺次连接起来的折线。给定的路面的一定满足以下性质：
    *第一个坐标点一定是(0, 0)；
    *第一个点和第二个点的纵坐标相同；
    *倒数第一个点和倒数第二个点的纵坐标相同；
    *第一个点和第二个点的距离不少于车轮半径；
    *倒数第一个点和倒数第二个点的的距离不少于车轮半径；
    *后一个坐标点的横坐标大于前一个坐标点的横坐标，即对于所有的i，x[i+1]>x[i]。
    输出一个实数，四舍五入保留两个小数，表示车轮轴经过的总长度。
    你的结果必须和参考答案一模一样才能得分。数据保证答案精确值的小数点后第三位不是4或5。
【样例输入1】
4 1.50
0.00 0.00
2.00 0.00
4.00 -1.00
6.00 -1.00
【样例输出1】
6.22
【样例说明1】
这个样例对应图1。
【样例输入2】
6 1.00
0.00 0.00
3.00 0.00
5.00 -3.00
6.00 2.00
7.00 -1.00
10.00 -1.00
【样例输出2】
15.20
【样例说明2】
这个样例对应图2
【数据规模与约定】
对于20%的数据，n=4；
对于40%的数据，n≤10；
对于100%的数据，4≤n≤100，0.5≤r≤20.0，x[i] ≤2000.0，-2000.0≤y[i] ≤2000.0。
资源约定：
峰值内存消耗 < 64M
CPU消耗  < 1000ms
请严格按要求输出，不要画蛇添足地打印类似：“请您输入...” 的多余内容。
所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。
注意: main函数需要返回0
注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。
注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。
提交时，注意选择所期望的编译器类型(千万不要混淆c和cpp)。
======================
计算几何题目：
四舍五入的陷阱  
3.49999 ===> 3
3.50000 ===> 4
概率上不公平
四舍六入五成双
--------------------------
大数运算
  Math.BigInteger   Math.BigDecimal
  c 手写
   递归 ..... 分块乘法
  


	8、（图论）大臣的旅费
    很久以前，T王国空前繁荣。为了更好地管理国家，王国修建了大量的快速路，用于连接首都和王国内的各大城市。
    为节省经费，T国的大臣们经过思考，制定了一套优秀的修建方案，使得任何一个大城市都能从首都直接或者通过其他大城市间接到达。同时，如果不重复经过大城市，从首都到达每个大城市的方案都是唯一的。
    J是T国重要大臣，他巡查于各大城市之间，体察民情。所以，从一个城市马不停蹄地到另一个城市成了J最常做的事情。他有一个钱袋，用于存放往来城市间的路费。
    聪明的J发现，如果不在某个城市停下来修整，在连续行进过程中，他所花的路费与他已走过的距离有关，在走第x千米到第x+1千米这一千米中（x是整数），他花费的路费是x+10这么多。也就是说走1千米花费11，走2千米要花费23。
    J大臣想知道：他从某一个城市出发，中间不休息，到达另一个城市，所有可能花费的路费中最多是多少呢？
输入格式：
输入的第一行包含一个整数n，表示包括首都在内的T王国的城市数
城市从1开始依次编号，1号城市为首都。
接下来n-1行，描述T国的高速路（T国的高速路一定是n-1条）
每行三个整数Pi, Qi, Di，表示城市Pi和城市Qi之间有一条高速路，长度为Di千米。
输出格式:
输出一个整数，表示大臣J最多花费的路费是多少。
样例输入:
5
1 2 2
1 3 1
2 4 5
2 5 4
样例输出:
135
样例说明:
大臣J从城市4到城市5要花费135的路费。
资源约定：
峰值内存消耗 < 64M
CPU消耗  < 5000ms
请严格按要求输出，不要画蛇添足地打印类似：“请您输入...” 的多余内容。
所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。
注意: main函数需要返回0
注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。
注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。
提交时，注意选择所期望的编译器类型。
题目意思应该是一个无环图，就样例输入也明显看得出来可以直接用邻接矩阵存储信息，注意应该是无向的，J大臣想知道：他从某一个城市出发，中间不休息，到达另一个城市，所有可能花费的路费中最多是多少呢？
也就是需要求图中哪两个点之间的距离最大，求图中任意两点之间的距离，首选当然是最好写的floyd算法了，然后用一个变量maxlen保存最大的那个。
想说一下一开始被最终距离的算法唬住了，走一千米11，走2千米花费23，理解出了点问题。。。。。
走一千米花了11，然后下次走一千米花了12，一共花了23，第三次一千米也就是花13，
每次初始值都是10+（1,2,3，。。。，maxlen）,后面也就是1到maxlen的和，即maxlen*(maxlen+1)/2;
试了一下样例输入没啥问题，但floyd算法的硬伤就是复杂度了，在蓝桥杯试题集上交了下这道题，果然只可以过75%的数据.
#include <stdio.h>
#define maxx 1000
#define INF 9999999
int ans,maxlen;
int a[maxx][maxx];
int min(int a,int b)
{
    if(a<b)
        return a;
    else
        return b;
}
int main()
{
    int n;
    int p,q,d;
    scanf("%d",&n);
    int i,j;
    for(i=1; i<=n; i++)
        for(j=1; j<=n; j++)
        {
            if(i==j)
                a[i][j]=0;
            else
                a[i][j]=INF;
        }
    for(i=1; i<n; i++)
    {
        scanf("%d %d %d",&p,&q,&d);
        a[p][q]=d;
        a[q][p]=d;
    }
//    for(i=1; i<=n; i++)
//    {
//        for(j=1; j<=n; j++)
//            printf("%d ",a[i][j]);
//        printf("\n");
//    }
    int k;
    for(k=1; k<=n; k++)
        for(i=1; i<=n; i++)
            for(j=1; j<=n; j++)
            {
                a[i][j]=min(a[i][j],a[i][k]+a[k][j]);
                if(a[i][j]!=INF&&maxlen<a[i][j])
                    maxlen=a[i][j];
            }
    ans=10*maxlen+(maxlen+1)*maxlen/2;
    printf("%d",ans);
    return 0;
}



去网上百度了下这道题，说是树的直径问题，，何为树的直径呢？ 
树T=（V,E）的直径（diameter）定义为max(u,v)，亦即，
树的直径是树中所有最短路径长度中的最大值。 
求一个树的直径有如下算法： 
s1: 以树中任一结点t为源点，进行搜索（DFS，BFS）至叶子节点u。 
s2: 从u继续搜索，直至不能搜了，到点v，并记录其长度。 
u与v之间的距离，即为所求树的直径。 
为什么呢？ 
这可以通过反证法来进行证明。 
证明：path(t,u)与树的直径没有任何公共点，但由于在树中，可以从直径向u引一条线，结果就会得到一条更长的树的直径，这就与已经得到的树的直径相矛盾了。所以path(t,u)一定与树的直径有至少一个公共点，取其中一个记为k，则path(k,u)一定是树直径的一部分。为什么不是path(t,k)呢？因为u一定是叶子节点（通过第一次搜索得到的）。 
然后就保证了u是树的直径的一个端点，然后从u开始再进行搜索，就会得到树的另一个端点v。
本题实际上是要求树中最远的两个点，可以使用两遍深度优先遍历解决。第一遍从1号点开始，找到距1号点最远的点a，如果有多个任取一个即可。第二遍从2号点开始，找到距a最远的点b，则a和b就是最远的两个点。
9、（图论）网络寻路

    X 国的一个网络使用若干条线路连接若干个节点。节点间的通信是双向的。某重要数据包，为了安全起见，必须恰好被转发两次到达目的地。该包可能在任意一个节点产生，我们需要知道该网络中一共有多少种不同的转发路径。

    源地址和目标地址可以相同，但中间节点必须不同。

    如图1所示的网络。

    1 -> 2 -> 3 -> 1  是允许的
    
    1 -> 2 -> 1-> 2 或者 1->2->3->2 都是非法的。

    输入数据的第一行为两个整数N M，分别表示节点个数和连接线路的条数(1<=N<=10000; 0<=M<=100000)。
    接下去有M行，每行为两个整数 u 和 v，表示节点u 和 v 联通(1<=u,v<=N , u!=v)。

    输入数据保证任意两点最多只有一条边连接，并且没有自己连自己的边，即不存在重边和自环。


    输出一个整数，表示满足要求的路径条数。

例如：
用户输入：
3 3
1 2
2 3
1 3
则程序应该输出：
6


再例如：
用户输入：
4 4
1 2
2 3
3 1
1 4
则程序应该输出：
10



资源约定：
峰值内存消耗 < 64M
CPU消耗  < 1000ms


请严格按要求输出，不要画蛇添足地打印类似：“请您输入...” 的多余内容。

所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。

注意: main函数需要返回0
注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。
注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。

提交时，注意选择所期望的编译器类型(千万不要混淆c和cpp)。

  邻接表
#include <iostream>
#include <stdio.h>
#include <memory.h>
using namespace std;
struct node
{
    int v,next;
} e[100005];
int head[10005],vis[10005];
int n,m,x,y,num,ans;
void init(int u,int v)
{
    e[num].v=v;
    e[num].next=head[u];
    head[u]=num++;
}
void dfs(int s,int step)
{
    int i;
    if(step==2)
    {
        for(i=head[s]; i!=-1; i=e[i].next)
            ans++;
        ans--;
        return ;
    }
    for(i=head[s]; i!=-1; i=e[i].next)
    {
        if(vis[e[i].v])
            continue;
        vis[e[i].v]=1;
        dfs(e[i].v,step+1);
        vis[e[i].v]=0;
    }
}

int main()
{
    int i;
    memset(head,-1,sizeof(head));
    scanf("%d%d",&n,&m);
    for(i=0; i<m; i++)
    {
        scanf("%d%d",&x,&y);
        init(x,y);
        init(y,x);
    }
    for(i=1; i<=n; i++)
    {
        memset(vis,0,sizeof(vis));//重复dfs()时记得初始化。。。。现在总是犯这些毛病
        vis[i]=1;//记得第一个数字标记啊，这儿也困了我很久
        dfs(i,0);
    }
    printf("%d\n",ans);
    return 0;
}
试着用下vector
#include <iostream>
#include<stdio.h>
#include <vector>
using namespace std;
#define maxx 10000
int m,n,cnt=0;
vector<int> a[maxx];
void dfs(int last,int st,int step)
{
    if(step==3)
    {
        cnt++;
        return;
    }
    for(int i=0;i<a[st].size();i++)
    {
        if(a[st][i]!=last)
            dfs(st,a[st][i],step+1);
    }
}
int main()
{
    cin>>n>>m;
    int x,y;
    while(m--)
    {
        scanf("%d %d",&x,&y);
        a[x].push_back(y);
        a[y].push_back(x);
    }
    for(int i=1;i<=n;i++)
        dfs(-1,i,0);
    cout << cnt << endl;
    return 0;
}
