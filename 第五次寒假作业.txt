第五次作业
1、机器人塔
X星球的机器人表演拉拉队有两种服装，A和B。
他们这次表演的是搭机器人塔。
类似：
     A
    B B
   A B A
  A A B B
 B B B A B
A B A B B A
队内的组塔规则是：
   A 只能站在 AA 或 BB 的肩上。
  B 只能站在 AB 或 BA 的肩上。
你的任务是帮助拉拉队计算一下，在给定A与B的人数时，可以组成多少种花样的塔。
输入一行两个整数 M 和 N，空格分开（0<M,N<500）,分别表示A、B的人数，保证人数合理性。
要求输出一个整数，表示可以产生的花样种数。
例如：
用户输入：
1 2
程序应该输出：
3
再例如：
用户输入：
3 3
程序应该输出：
4
资源约定：
峰值内存消耗 < 256M
CPU消耗  < 1000ms
请严格按要求输出，不要画蛇添足地打印类似：“请您输入...” 的多余内容。
所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。
注意：不要使用package语句。不要使用jdk1.7及以上版本的特性。
注意：主类的名字必须是：Main，否则按无效代码处理。
#include<stdio.h>
#include<math.h> 
#include<cstring>
int a[1000][1000];
int main()
{
	int m,n,sum;
	scanf("%d%d",&m,&n);
	sum=m+n;
	int x,count=0;
	x=(int)sqrt(2*sum);
		
	for(int i=0;i<=pow(2,x)-1;i++){
		
		int tn=n,tm=m;
		memset(a,0,sizeof(a));
		int k=0;
		
		for(int t=i;t>0;t/=2)
		
			a[x-1][k++]=t%2;
		
		for(int y=(x-1);y>0;y--)
			for(int k=0;k<y;k++){
				if(a[y][k]==a[y][k+1])
				{
					a[y-1][k]=1;
			
				}
				else{
					a[y-1][k]=0;
				}	
			}
			
    for(int o=0;o<=x-1;o++)
		for(int q=0;q<=o;q++)
			if(a[o][q]==1)
				tm--;
			else tn--;
					
		if(tm==0&&tn==0){
			count++;
		
		}
			
	}
	printf("%d",count);	
	return 0; 
}
2、福尔摩斯到某古堡探险，看到门上写着一个奇怪的算式：
    ABCDE * ? = EDCBA
    他对华生说：“ABCDE应该代表不同的数字，问号也代表某个数字！”
    华生：“我猜也是！”
    于是，两人沉默了好久，还是没有算出合适的结果来。
    请你利用计算机的优势，找到破解的答案。
    把 ABCDE 所代表的数字写出来。
答案写在“解答.txt”中，不要写在这里！

#include <stdio.h>
int main()
{
    int a,b,c,d,e,w;
    int sum1,sum2;
    for(a=1; a<=9; a++)
    {
        for(b=1; b<=9; b++)
        {
            for(c=0; c<=9; c++)
            {
                for(d=1; d<=9; d++)
                {
                    for(e=1; e<=9; e++)
                    {
                        for(w=1; w<=9; w++)
                        {
                            sum1=e+d*10+c*100+b*1000+a*10000;
                            sum2=a+b*10+c*100+d*1000+e*10000;
                            if(sum1*w==sum2 &&a!=b&&a!=c&&a!=d&&a!=e&&b!=c&&b!=d&&b!=e&&c!=d&&c!=e&&d!=e)
                                printf("A=%d B=%d C=%d D=%d E=%d \n",a,b,c,d,e);
                        }
                    }
                }
            }
        }
    }
    return 0;
}

3、四平方和
四平方和定理，又称为拉格朗日定理：
每个正整数都可以表示为至多4个正整数的平方和。
如果把0包括进去，就正好可以表示为4个数的平方和。
比如：
5 = 0^2 + 0^2 + 1^2 + 2^2
7 = 1^2 + 1^2 + 1^2 + 2^2
（^符号表示乘方的意思）
对于一个给定的正整数，可能存在多种平方和的表示法。
要求你对4个数排序：
0 <= a <= b <= c <= d
并对所有的可能表示法按 a,b,c,d 为联合主键升序排列，最后输出第一个表示法
程序输入为一个正整数N (N<5000000)
要求输出4个非负整数，按从小到大排序，中间用空格分开
例如，输入：
5
则程序应该输出：
0 0 1 2
再例如，输入：
12
则程序应该输出：
0 2 2 2
再例如，输入：
773535
则程序应该输出：
1 1 267 838
资源约定：
峰值内存消耗 < 256M
CPU消耗  < 3000ms
请严格按要求输出，不要画蛇添足地打印类似：“请您输入...” 的多余内容。
所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。
注意: main函数需要返回0
注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。
注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。
提交时，注意选择所期望的编译器类型。
#include<stdio.h>
#include<math.h>
int main()
{
    int n,a,b,c,d;
    scanf("%d",&n);
    for(a=0;a<2300;a++)
    {
        for(b=a;b<2300;b++)
        {
            for(c=b;c<2300;c++)//当a,b,c都确定时，利用公式计算d，然后判断是否满足a*a+b*b+c*c+d*d=n.
            {
                d=sqrt(n-a*a-b*b-c*c);       //只需要枚举三个数，最后一个倒着求出来，然后正着验证就可以
                if(a*a+b*b+c*c+d*d==n)
                {
                    printf("%d %d %d %d\n",a,b,c,d);
                    return 0;
                }
            }
        }
    }
}

4、
    下面的代码先调用init函数填充一个二维数组，然后调用show函数，把该数组显示出来。
    二维数组指针传入函数的时候被当做一维数组来处理。这里利用了二维数组在内存中存储特征：先存第1行，再存第2行，...
        因此，我们根据一维数组的下标，可以计算出其二维数组的下标。
   #include <stdio.h>
#define ROW 5
#define COL 5
void init(int* p)
{
	int i;
	for(i=0; i<ROW*COL; i++){
		p[i] = i+1;
	}
}
void show(int* p)
{
	int i;
	for(i=0; i<ROW*COL; i++){
		printf("%3d ", p[i]);
		if(_________________){   //填空位置
			printf("\n");
		}
	}
}
int main()
{
	int a[ROW][COL];
	init((int*)a);
	show((int*)a);
	return 0;
}
为了显示为二维数组，需要在每一行的结束输出换行符。关键是计算出应该输出的时机。
注意：
第一行之前不能换行（那样会产生一个空行），最后一行结束需要换行符。
另外注意不要把程序写“死”了，当改变ROW COl值得时候，程序的反应应该是正常的。
对于题目中的值，应该输出：
  1   2   3   4   5
  6   7   8   9  10
 11  12  13  14  15
 16  17  18  19  20
 21  22  23  24  25

请仔细阅读源程序，填写划线位置缺少的代码。
if((i+1)%5==0) 

5、
    假设一个句子是由许多单词用一个或多个空格分开的，比如：
    "cow    dog  cat    cow  horse   dog  duck cat dog dog"
    请你统计出每个词出现的次数。
    输出类似：
cow = 2
dog = 3
cat = 2
horse = 1
duck = 1
    下面的程序实现了这个功能。其基本思想是：
    准备一个结构数组，每个结构中存储：单词和它出现的次数。
    从头扫描串，分离出一个个的单词，在结构数组中查找，如果有，就把该结构的计数增加，如果没有，就创建新的结构，并记录其次数为1.
       分离单词的算法是：一直扫描待定串，如果遇到空格，就把已经累积的字符做成单词送出，如果不是空格，就把该字符累积起来，然后扫描下一个字符。
       请仔细阅读程序，填写划线部分缺少的代码。
   #include <stdio.h>
#include <string.h>
#define MAX_NUM 30
typedef struct{
	char word[20];
	int num;
}WORD_CELL; 
// 在words中查找，如果找到，把其num增加，如果没有，建立新记录 
int PutWord(WORD_CELL* words, int n, char* word)
{
	WORD_CELL* p= words;
	int i; 
	for(i=0; i<n; i++){
		if(strcmp(p->word,word)==0){
			p->num++;
			return n;
		}
		p++;
	}
	
	strcpy(_______________________); //填空位置
	p->num = 1;
	return n+1;
}
void show(WORD_CELL* words, int n)
{
	int i;
	for(i=0; i<n; i++){
		printf("%s = %d\n", words[i].word, words[i].num);
	}
}
void f(char* p)
{
	char buf[100];  //存储临时产生的单词 
	int nBuf = 0;  // 记录buf中的有效字符数 
	
	WORD_CELL words[MAX_NUM];  
	int nWords = 0; //记录words中的有效记录数目 
	
	for(;*p;p++){
		if(*p==' '){
			if(nBuf>0){
				buf[nBuf] = '\0';
				nWords = PutWord(words, nWords, buf);
				nBuf = 0;
			}
		}
		else {
			buf[nBuf++] = *p;
		}
	}
	if(nBuf>0){
		buf[nBuf] = '\0';
		nWords = PutWord(words, nWords, buf);		
	}	
	show(words, nWords);
}
int main()
{
	char word[] = "cow   dog cat cow horse dog  duck  cat dog    dog";
	f(word);
	return 0;
}
strcpy(p->word, word);
6、用天平称重时，我们希望用尽可能少的砝码组合称出尽可能多的重量。
如果只有5个砝码，重量分别是1，3，9，27，81。则它们可以组合称出1到121之间任意整数重量（砝码允许放在左右两个盘中）。
本题目要求编程实现：对用户给定的重量，给出砝码组合方案。
例如：
用户输入：
5
程序输出：
9-3-1
用户输入：
19
程序输出：
27-9+1
要求程序输出的组合总是大数在前小数在后。
可以假设用户的输入的数字符合范围1~121。
【解题思路提示】
我们把已知的砝码序列记为：x1, x2, x3, x4, x5, x6 (这里多加一个标准砝码，为解题叙述方便)
对于任意给定的重量x，如果刚好等于xi 则问题解决。
否则一定会位于两个标准砝码重量的中间，不妨设为：xi < x < xj
令 a = x – xi,  b = xj – x
则，x 要么可以表示为： xi + a, 要么可以表示为： xj – b
这样问题就归结为怎样表示出 a 或 b
另一思路：对于每个xi，可以乘以一个系数ki，再求和。
ki的数值无外乎：-1 0 1
这样，因为标准砝码的数量的很少的，我们就可以多层循环暴力组合ki来求解。
还有更“土气”但有效的思路：既然输入范围只有120左右，如果对每一种情况都做人工求解，只要列一个大表，等查询的时候，直接输出答案就好了啊！但…这似乎是个耗时的工程…
#include<cstdio>
#include<cmath>
int a[6]={0,1,3,9,27,81};
int b[6];
int n;
int flag=0;
void init()
{
	b[1]=1;
	for(int i=2;i<=5;i++)
	b[i]+=b[i-1]+a[i];
}
int main()
{
	init();
	scanf("%d",&n);
	for(int i=5;i>=1;i--)
	{
		if(fabs(n)<=b[i]&&fabs(n)>b[i-1])
		{
            if(n>0)
            {
            	if(flag==1)
            	{
            		printf("+");
				}
				printf("%d",a[i]);
            	n-=a[i];
            	flag=1;
			}
			else if(n<0)
			{
				printf("-");
				printf("%d",a[i]);
				n+=a[i];
			}
		}
	}
	return 0;
} 
7、抽签
X星球要派出一个5人组成的观察团前往W星。
其中：
A国最多可以派出4人。
B国最多可以派出2人。
C国最多可以派出2人。
.那么最终派往W星的观察团会有多少种国别的不同组合呢？
下面的程序解决了这个问题。
数组a[] 中即是每个国家可以派出的最多的名额。
程序执行结果为：
DEFFF
CEFFF
CDFFF
CDEFF
CCFFF
CCEFF
CCDFF
CCDEF
BEFFF
BDFFF
BDEFF
BCFFF
BCEFF
BCDFF
BCDEF
....
(以下省略，总共101行)
#include <stdio.h>
#define N 6
#define M 5
#define BUF 1024
void f(int a[], int k, int m, char b[])
{
	int i,j;
	
	if(k==N){ 
		b[M] = 0;
		if(m==0) printf("%s\n",b);
		return;
	}
	
	for(i=0; i<=a[k]; i++){
		for(j=0; j<i; j++) b[M-m+j] = k+'A';
		______________________;  //填空位置
	}
}
int main()
{	
	int  a[N] = {4,2,2,1,1,3};
	char b[BUF];
	f(a,0,M,b);
	return 0;
}
仔细阅读代码，填写划线部分缺少的内容。
注意：不要填写任何已有内容或说明性文字。
读题后看了程序，不难看出填空位置是要填写递归语句，而第一个参数和最后一个参数不需要改变，根据递归退出条件和给出的常量可以推断出m表示还需要组多少人。k表示队伍编，因此每次操作一个队伍，所以每次递归的时候k要加一，而m人数需要减少相应的人数。
f(a,k+1,m-j,b) 
8、消除尾一
下面的代码把一个整数的二进制表示的最右边的连续的1全部变成0
如果最后一位是0，则原数字保持不变。
如果采用代码中的测试数据，应该输出：
00000000000000000000000001100111   00000000000000000000000001100000
00000000000000000000000000001100   00000000000000000000000000001100
请仔细阅读程序，填写划线部分缺少的代码。
#include <stdio.h>
void f(int x)
{
	int i;
	for(i=0; i<32; i++) printf("%d", (x>>(31-i))&1);
	printf("   ");
	
	x = _______________________;
	
	for(i=0; i<32; i++) printf("%d", (x>>(31-i))&1);
	printf("\n");	
}
int main()
{
	f(103);
	f(12);
	return 0;
}
注意：只填写缺少的内容，不要书写任何题面已有代码或说明性文字。
	x = x&(x+1);

解果填空中出现过的题目
爱迪生的椭球体

百度的面试题

    很大规模的一个数组，存储字母，某个字母总出现次数超一半，
位置情况未知， 。。。。

两个相交的椭圆面积
9、已知平面上若干个点的坐标。

需要求出在所有的组合中，4个点间平均距离的最小值（四舍五入，保留2位小数）。

比如有4个点：a,b,c,d,则平均距离是指：ab, ac, ad, bc, bd, cd 这6个距离的平均值。

每个点的坐标表示为：横坐标,纵坐标

坐标的取值范围是：1~1000

所有点的坐标记录在in.txt中，请读入该文件，然后计算。

注意：我们测试您的程序的时候，in.txt 可能会很大，比如包含上万条记录。

举例：
如果，in.txt 内的值为：

10,10
20,20
80,50
10,20
20,10

则程序应该输出：
11.38


要求考生把所有类写在一个文件中。
调试好后，存入与考生文件夹下对应题号的“解答.txt”中即可。
相关的工程文件不要拷入。请不要使用package语句。

另外，源程序中只能出现JDK1.5中允许的语法或调用。不能使用1.6或更高版本。
#include<cstdio>
#include<cstring>
#include<cmath>
#include<iostream>
using namespace std;
struct node
{
	double x,y;
}a[50005];
int n;
int b[5];
double minlen=999999;
double jisuan()
{
	double x1=a[b[0]].x-a[b[1]].x;
	double x2=a[b[0]].x-a[b[2]].x;
	double x3=a[b[0]].x-a[b[3]].x;
	double x4=a[b[1]].x-a[b[2]].x;
	double x5=a[b[1]].x-a[b[3]].x;
    double x6=a[b[2]].x-a[b[3]].x;
	double y1=a[b[0]].y-a[b[1]].y;
	double y2=a[b[0]].y-a[b[2]].y;
	double y3=a[b[0]].y-a[b[3]].y;
	double y4=a[b[1]].y-a[b[2]].y;
	double y5=a[b[1]].y-a[b[3]].y;
	double y6=a[b[2]].y-a[b[3]].y;
	return sqrt(x1*x1+y1*y1)+sqrt(x2*x2+y2*y2)+sqrt(x3*x3+y3*y3)+sqrt(x4*x4+y4*y4)
	       +sqrt(x5*x5+y5*y5)+sqrt(x6*x6+y6*y6);
}
void dfs(int k,double now)
{
	if(now/6>=minlen)
	return;
	if(k==4)
	{
		double nowlen=jisuan()/6;
		minlen=min(minlen,nowlen);
		return;
	}
	double len=9999;
	int t=1;
	for(int i=1;i<=n;i++)
	{
		if(i!=b[0]&&i!=b[1]&&i!=b[2]&&i!=b[3])
		{
			double x=a[i].x-a[b[k-1]].x;
			double y=a[i].y-a[b[k-1]].y;
			double temp=sqrt(x*x+y*y);
			if(temp<len)
			{
				len=temp;
				t=i;
			}
		}
	}
	b[k]=t;
	dfs(k+1,now+len);
}
int main()
{
	scanf("%d",&n);
	for(int i=1;i<=n;i++)
	{
		scanf("%lf,%lf",&a[i].x,&a[i].y);
	}
	for(int i=1;i<=n;i++)
	{
		memset(b,0,sizeof(b));
		b[0]=i;
		dfs(1,0);
	}
	printf("%.2f",minlen);
	return 0;
}
10、2014预赛

标题：蚂蚁感冒

    长100厘米的细长直杆子上有n只蚂蚁。它们的头有的朝左，有的朝右。 

    每只蚂蚁都只能沿着杆子向前爬，速度是1厘米/秒。

    当两只蚂蚁碰面时，它们会同时掉头往相反的方向爬行。

    这些蚂蚁中，有1只蚂蚁感冒了。并且在和其它蚂蚁碰面时，会把感冒传染给碰到的蚂蚁。

    请你计算，当所有蚂蚁都爬离杆子时，有多少只蚂蚁患上了感冒。


【数据格式】

    第一行输入一个整数n (1 < n < 50), 表示蚂蚁的总数。

    接着的一行是n个用空格分开的整数 Xi (-100 < Xi < 100), Xi的绝对值，表示蚂蚁离开杆子左边端点的距离。正值表示头朝右，负值表示头朝左，数据中不会出现0值，也不会出现两只蚂蚁占用同一位置。其中，第一个数据代表的蚂蚁感冒了。

    要求输出1个整数，表示最后感冒蚂蚁的数目。

例如，输入：
3
5 -2 8
程序应输出：
1

再例如，输入：
5
-10 8 -20 12 25
程序应输出：
3

资源约定：
峰值内存消耗 < 256M
CPU消耗  < 1000ms


请严格按要求输出，不要画蛇添足地打印类似：“请您输入...” 的多余内容。

所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。

注意: main函数需要返回0
注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。
注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。

提交时，注意选择所期望的编译器类型。
 第一只蚂蚁一定是感冒的，它会感染与它碰面的其他蚂蚁，题目中说两只蚂蚁碰面后会掉头。其实吧，它掉不掉头其实效果都是一样的，人家还懒得掉头呢，我们不需要知道谁感染了谁，只要知道都有哪些被感染了即可。那么，如果第一只蚂蚁头朝右，那它势必会感染到它的右侧所有头向左的蚂蚁，这些头向左的蚂蚁又会去感染他左侧所有头向右的蚂蚁。
所以，只需要统计出第一只蚂蚁左侧头朝右的蚂蚁和第一只蚂蚁右侧头朝左的蚂蚁的数量，然后加上它本身就是所有被感染的蚂蚁数量。但是有个特殊点需要注意一下，第一只蚂蚁头朝右时要保证他的右侧一定有头向左的蚂蚁才行。
#include <stdio.h>  
#include <stdlib.h>  
struct ANT  
{  
    int loc;//在第一个蚂蚁的左侧还是右侧  
    //1表示右侧，-1表示左侧  
    int dir;//头的方向  
};  
struct ANT ant[60];  
int main()  
{  
    int n;  
    while(scanf("%d",&n)!=EOF)  
    {  
        int i;  
        int cold=1,rr,rl,lr,ll;  
        rr=rl=lr=ll=0;  
        int a[n];  
        for(i=0; i<n; i++)  
            scanf("%d",&a[i]);  
        //处理数据  
        for(i=1; i<n; i++)  
        {  
            ant[i].dir=1;//初始化默认所有蚂蚁头朝右  
            ant[i].loc=1;//初始化默认所得蚂蚁都在第一只蚂蚁的右侧  
            if(fabs(a[i])<fabs(a[0]))  
            {  
                ant[i].loc=-1;//到左边端点距离小于第一只蚂蚁，则在它的左侧，更新数据。  
            }  
            if(a[i]<0)  
                ant[i].dir=-1;//输入数据<0表示头朝左  
        }  
        for(i=1; i<n; i++)  
        {  
            if(ant[i].loc==1&&ant[i].dir==-1)//右侧头朝左的  
                rl++;  
            if(ant[i].loc==1&&ant[i].dir==1)//右侧头朝右的  
                rr++;  
            if(ant[i].loc==-1&&ant[i].dir==1)//左侧头朝右的  
                lr++;  
            if(ant[i].loc==-1&&ant[i].dir==-1)//左侧头朝左的  
                ll++;  
        }  
        if(a[0]>0&&rl!=0)//感冒的蚂蚁头朝右  
            cold=rl+lr+1;  
        if(a[0]<0&&lr!=0)//感冒的蚂蚁头朝左  
            cold=rr+ll+1;  
        printf("%d\n",cold);  
    }  
    return 0;  
}  
11、南北朝时，我国数学家祖冲之首先把圆周率值计算到小数点后六位，比欧洲早了1100年！他采用的是称为“割圆法”的算法，实际上已经蕴含着现代微积分的思想。
    如图【1.jpg】所示，圆的内接正六边形周长与圆的周长近似。多边形的边越多，接近的越好！我们从正六边形开始割圆吧。
    如图【2.jpg】所示，从圆心做弦的垂线，可把6边形分割为12边形。该12边形的边长a'的计算方法很容易利用勾股定理给出。之后，再分割为正24边形，....如此循环会越来越接近圆周。
    之所以从正六边开始，是因为此时边长与半径相等，便于计算。取半径值为1，开始割圆吧！
    以下代码描述了割圆过程。
       程序先输出了标准圆周率值，紧接着输出了不断分割过程中多边形边数和所对应的圆周率逼近值。
public class B21
{
	public static void main(String[] args)
	{
		System.out.println("标准 " + Math.PI);
		
		double a = 1; 
		int n = 6;
		
		for(int i=0; i<10; i++)
		{
			double b = Math.sqrt(1-(a/2)*(a/2));
			a = Math.sqrt((1-b)*(1-b) + (a/2)*(a/2));
			
			n = ______________; //填空
			
			System.out.println(n + "  " + _______________);  // 填空
		}
	}
}
请分析代码逻辑，并推测划线处的代码。
答案写在 “解答.txt” 文件中
注意：只写划线处应该填的内容，划线前后的内容不要抄写。


n*2
a*n/2

12、2012年预赛


    泊松是法国数学家、物理学家和力学家。他一生致力科学事业，成果颇多。有许多著名的公式定理以他的名字命名，比如概率论中著名的泊松分布。

    有一次闲暇时，他提出过一个有趣的问题，后称为：“泊松分酒”。在我国古代也提出过类似问题，遗憾的是没有进行彻底探索，其中流传较多是：“韩信走马分油”问题。

    有3个容器，容量分别为12升，8升，5升。其中12升中装满油，另外两个空着。要求你只用3个容器操作，最后使得某个容器中正好有6升油。

    下面的列表是可能的操作状态记录：
12,0,0
4,8,0
4,3,5
9,3,0
9,0,3
1,8,3
1,6,5

    每行3个数据，分别表示12，8，6升容器中的油量

    第一行表示初始状态，第二行表示把12升倒入8升容器后的状态，第三行是8升倒入5升，...

    当然，同一个题目可能有多种不同的正确操作步骤。

    本题目的要求是，请你编写程序，由用户输入：各个容器的容量，开始的状态，和要求的目标油量，程序则通过计算输出一种实现的步骤（不需要找到所有可能的方法）。如果没有可能实现，则输出：“不可能”。

    例如，用户输入：
12,8,5,12,0,0,6

    用户输入的前三个数是容器容量（由大到小），接下来三个数是三个容器开始时的油量配置，最后一个数是要求得到的油量（放在哪个容器里得到都可以）

    则程序可以输出（答案不唯一，只验证操作可行性）：
12,0,0
4,8,0
4,3,5
9,3,0
9,0,3
1,8,3
1,6,5

    每一行表示一个操作过程中的油量状态。

   注意：

    请仔细调试！您的程序只有能运行出正确结果的时候才有机会得分！
    
    请把所有类写在同一个文件中，调试好后，存入与【考生文件夹】下对应题号的“解答.txt”中即可。
    
    相关的工程文件不要拷入。
    
    请不要使用package语句。
    
    源程序中只能出现JDK1.5中允许的语法或调用。不能使用1.6或更高版本。  
 #include<cstdio>
struct node
{
	int x,y,z;
	int t;
}a[10005];
int x,y,z,tar;
void dfs(int k)
{
	if(k==0)
	{
		printf("%d,%d,%d\n",a[k].x,a[k].y,a[k].z);
		return;
	}
	if(k!=0)
	{
		dfs(a[k].t);
		printf("%d,%d,%d\n",a[k].x,a[k].y,a[k].z);
	}
}
void find()
{
	int top=0,f=-1;
	while(f<top)
	{
		f++;
		if(a[f].x==tar||a[f].y==tar||a[f].z==tar)
		{
			dfs(f);
			break;
		}
		for(int i=1;i<7;i++)
		{
			int fx=a[f].x;
			int fy=a[f].y;
			int fz=a[f].z;
			int flag=0;
			switch(i)
			{
				case 1:fx+fy>y?(fx-=(y-fy),fy=y):(fy+=fx,fx=0);break;
				case 2:fx+fz>z?(fx-=(z-fz),fz=z):(fz+=fx,fx=0);break;
				case 3:fy+fz>z?(fy-=(z-fz),fz=z):(fz+=fy,fy=0);break;
				case 4:fy+fx>x?(fy-=(x-fx),fx=x):(fx+=fy,fy=0);break;
				case 5:fz+fx>x?(fz-=(x-fx),fx=x):(fx+=fz,fz=0);break;
				case 6:fz+fy>y?(fz-=(y-fy),fy=y):(fy+=fz,fz=0);break;
			};
			for(int j=0;j<=top;j++)
			{
				if(a[j].x==fx&&a[j].y==fy&&a[j].z==fz)
				{
					flag=1;
					break;
				}
			}
			if(flag==0)
			{
				top++;
				a[top].x=fx;
				a[top].y=fy;
				a[top].z=fz;
				a[top].t=f;
			}
		}
	} 
}
int main()
{
	scanf("%d,%d,%d,",&x,&y,&z);
	scanf("%d,%d,%d,",&a[0].x,&a[0].y,&a[0].z);
	scanf("%d",&tar);
	find();
	return 0;
}
    


    13、2016年预赛

寒假作业

现在小学的数学题目也不是那么好玩的。
看看这个寒假作业：

   □ + □ = □
   □ - □ = □
   □ × □ = □
   □ ÷ □ = □
   
   (如果显示不出来，可以参见【图1.jpg】)
   
每个方块代表1~13中的某一个数字，但不能重复。
比如：
 6  + 7 = 13
 9  - 8 = 1
 3  * 4 = 12
 10 / 2 = 5

以及： 
 7  + 6 = 13
 9  - 8 = 1
 3  * 4 = 12
 10 / 2 = 5

就算两种解法。（加法，乘法交换律后算不同的方案）
 
你一共找到了多少种方案？
64种
#include<stdio.h>  
#include<string.h>  
int cnt=0;  
void fun(int vis[],int arr[],int start,int end)  
{  
    if(start>end)  
    {  
        if(arr[0]+arr[1]==arr[2] && arr[3]-arr[4]==arr[5])  
        {  
            if(arr[6]*arr[7]==arr[8] && arr[10]*arr[11]==arr[9])  
            { 
                cnt++;  
            }  
        }  
    }  
    else  
    {  
        for(int i=1;i<=13;i++)  
        {  
            if(vis[i]==0)  
            {  
                vis[i]=1;  
                arr[start]=i;  
                fun(vis,arr,start+1,end);  
                vis[i]=0;  
            }  
        }  
    }  
}  
int main()  
{  
    int vis[14];  
    int arr[14];  
    memset(vis,0,sizeof(vis));  
    memset(arr,0,sizeof(arr));  
    fun(vis,arr,0,12);  
    printf("%d\n",cnt);  
    return 0;  
}  


请填写表示方案数目的整数。
注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。
14、这是人家的期末考试题，我们做着玩玩
填空：
软件从功能上分，可以分为 系统软件 和 应用软件__________

简述：
数组与动态数组比有哪些优点和缺点？


------------------------------------------
代码求结果

int a = 5;
double b = 10;

for(;sqrt(b)<a+1; b+=0.1){
	if(a>0) a--;
	printf("%d,%f\n", a, b);
} 
答案
4,10.000000
3,10.100000
2,10.200000


请写出程序输出结果的行数。

-------------------------------------
论述：

孙悟空借芭蕉扇的故事中体现哪些设计模式？
15、2016年预赛

煤球数目

有一堆煤球，堆成三角棱锥形。具体：
第一层放1个，
第二层3个（排列成三角形），
第三层6个（排列成三角形），
第四层10个（排列成三角形），
....
如果一共有100层，共有多少个煤球？

请填表示煤球总数目的数字。
注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。

答案：171700



#include<stdio.h>

int a[105];
int main()
{
    int sum=0;
    a[0]=0;
    int i;
    for(i=0;i<=100;i++)
    {
        a[i]+=(i+a[i-1]);
        sum+=a[i];
    }
    printf("%d\n",sum);
}


12,13,14,1,5,16年真题开学强化训练时再做。
